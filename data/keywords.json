{
    "DDD (Domain-Driven Design)": "비즈니스 도메인에 초점을 맞추어 소프트웨어를 모델링하고 설계하는 접근 방식",
    "유비쿼터스 언어 (Ubiquitous Language)": "도메인 전문가와 개발자 간의 효과적인 의사소통을 위해 프로젝트 전반에 걸쳐 일관되게 사용되는 공통 언어",
    "바운디드 컨텍스트 (Bounded Context)": "특정 도메인 모델이 적용되는 명확한 경계를 정의하여 모델의 무결성을 유지하는 DDD의 핵심 패턴",
    "애그리게이트 (Aggregate)": "연관된 객체들의 집합을 하나의 단위로 취급하여 일관성을 유지하는 DDD의 패턴",
    "ACID": "데이터베이스 트랜잭션이 안전하게 수행됨을 보장하는 4가지 특성(원자성, 일관성, 독립성, 지속성)의 약어",
    "CAP 정리 (CAP Theorem)": "분산 데이터 시스템에서 일관성, 가용성, 분할 내성 중 동시에 세 가지를 모두 만족할 수 없다는 이론",
    "베이스 정리 (BASE Theorem)": "CAP 정리의 대안으로, 분산 시스템에서 일관성보다는 가용성에 중점을 둔 설계 원칙",
    "멱등성 (Idempotence)": "동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니는 성질",
    "트레이싱 (Tracing)": "분산 시스템에서 요청의 전체 경로를 추적하여 시스템 동작을 이해하고 문제를 진단하는 기술",
    "서킷브레이커 (Circuit Breaker)": "시스템 장애 시 연쇄적인 오류 전파를 방지하기 위해 자동으로 서비스 호출을 차단하는 안정성 패턴",
    "백프레셔 (Backpressure)": "데이터 스트림에서 수신자가 처리할 수 있는 양보다 많은 데이터가 유입될 때 이를 제어하는 메커니즘",
    "폴백 (Fallback)": "주요 서비스나 기능이 실패했을 때 대체 동작이나 서비스를 제공하여 시스템의 안정성을 유지하는 방법",
    "벌크헤드 (Bulkhead)": "시스템을 독립적인 구획으로 분리하여 한 부분의 장애가 전체 시스템으로 확산되는 것을 방지하는 아키텍처 패턴",
    "리트라이 (Retry)": "일시적인 오류로 인해 실패한 작업을 정해진 횟수나 전략에 따라 자동으로 다시 시도하는 오류 처리 기법",
    "타임아웃 (Timeout)": "작업이 지정된 시간 내에 완료되지 않을 경우 강제로 중단시키는 메커니즘",
    "스택 (Stack)": "데이터를 후입선출(LIFO) 방식으로 저장하고 접근하는 추상적 자료구조",
    "힙 (Heap)": "프로그램 실행 중 동적으로 메모리를 할당받는 영역으로, 객체나 큰 데이터 구조를 저장하는 데 사용",
    "클로저 (Closure)": "함수와 그 함수가 선언될 당시의 렉시컬 환경의 조합으로, 함수가 자신이 생성될 때의 환경을 기억하는 기능",
    "콜백 함수 (Callback Function)": "다른 코드의 인자로 넘겨주는 실행 가능한 코드로, 특정 이벤트 발생 시 호출되는 함수",
    "프로미스 (Promise)": "비동기 작업의 최종 완료 또는 실패를 나타내는 객체로, 비동기 코드를 동기 코드처럼 쉽게 작성할 수 있게 도와주는 패턴",
    "제너레이터 (Generator)": "실행을 일시 중지하고 재개할 수 있는 특수한 함수로, 이터레이터를 생성하는데 사용",
    "CORS (Cross-Origin Resource Sharing)": "웹 페이지가 다른 도메인의 리소스에 접근할 수 있도록 허용하는 보안 메커니즘",
    "JWT (Json Web Token)": "당사자 간 정보를 안전하게 JSON 객체로 전송하기 위한 컴팩트하고 독립적인 방식",
    "OAuth": "사용자 계정의 접근 권한을 다른 애플리케이션에 부여할 수 있게 하는 개방형 표준 인증 프로토콜",
    "세션 관리 (Session Management)": "웹 애플리케이션에서 사용자의 상태 정보를 유지하고 관리하는 메커니즘",
    "쿠키 (Cookie)": "웹 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 조각으로, 상태 정보를 클라이언트 측에 저장하는 데 사용",
    "캐싱 (Caching)": "자주 접근하는 데이터를 고속의 저장소에 임시 보관하여 빠른 접근과 성능 향상을 도모하는 기술",
    "인덱싱 (Indexing)": "데이터베이스에서 검색 속도를 높이기 위해 특정 컬럼의 값과 해당 레코드의 위치 정보를 별도로 저장하는 자료 구조",
    "정규 표현식 (Regular Expression)": "특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어",
    "CI/CD (Continuous Integration/Continuous Deployment)": "코드 변경을 지속적으로 통합, 빌드, 테스트하고 자동으로 배포하는 소프트웨어 개발 방법론",
    "TDD (Test-Driven Development)": "실제 코드를 작성하기 전에 테스트 코드를 먼저 작성하고 그에 맞춰 개발을 진행하는 소프트웨어 개발 방법론",
    "BDD (Behavior-Driven Development)": "시스템의 행동을 명세화하고 이를 기반으로 개발과 테스트를 진행하는 소프트웨어 개발 방법론",
    "단위 테스트 (Unit Test)": "소프트웨어의 개별 단위(주로 함수나 메서드)를 독립적으로 테스트하는 방법",
    "통합 테스트 (Integration Test)": "개별 모듈이나 컴포넌트를 결합하여 전체 시스템으로서의 동작을 검증하는 테스트 방법",
    "모킹 (Mock)": "실제 객체의 동작을 시뮬레이션하는 객체로, 특정 메서드 호출에 대한 결과를 미리 지정할 수 있음",
    "스텁 (Stub)": "테스트 중에 호출되는 객체나 메서드에 대해 미리 정의된 결과를 반환하는 테스트 더블의 일종",
    "코드 커버리지 (Code Coverage)": "소프트웨어 테스트 시 실행된 소스 코드의 비율을 나타내는 지표",
    "정적 분석 (Static Analysis)": "프로그램을 실행하지 않고 소스 코드를 분석하여 잠재적 버그, 코딩 스타일 위반 등을 찾아내는 방법",
    "동적 분석 (Dynamic Analysis)": "프로그램을 실제로 실행하면서 그 동작을 관찰하고 분석하는 방법",
    "리팩토링 (Refactoring)": "외부 동작을 변경하지 않으면서 내부 구조를 개선하여 코드의 가독성과 유지보수성을 높이는 과정",
    "클린 코드 (Clean Code)": "가독성이 높고, 단순하며, 중복이 없는 깔끔하게 작성된 코드",
    "CRUD (Create, Read, Update, Delete)": "데이터베이스에서 데이터를 생성, 읽기, 갱신, 삭제하는 네 가지 기본적인 데이터 처리 기능",
    "ORM (Object-Relational Mapping)": "객체지향 프로그래밍 언어와 관계형 데이터베이스 사이의 데이터를 변환하는 프로그래밍 기법",
    "N+1 문제 (N+1 Problem)": "ORM에서 발생하는 성능 문제로, 하나의 쿼리 실행 후 연관된 데이터를 가져오기 위해 N개의 추가 쿼리가 발생하는 현상",
    "지연 로딩 (Lazy Loading)": "데이터베이스에서 객체를 조회할 때 연관된 객체들을 실제로 사용하는 시점에 로딩하는 방식",
    "즉시 로딩 (Eager Loading)": "데이터베이스에서 객체를 조회할 때 연관된 객체들을 함께 로딩하는 방식",
    "낙관적 락 (Optimistic Locking)": "데이터 충돌이 드물게 일어난다고 가정하고, 데이터 수정 시 버전을 확인하여 충돌을 감지하는 동시성 제어 방식",
    "비관적 락 (Pessimistic Locking)": "데이터 충돌이 자주 일어난다고 가정하고, 데이터 수정 전에 락을 걸어 다른 트랜잭션의 접근을 막는 동시성 제어 방식",
    "경쟁 조건 (Race Condition)": "둘 이상의 프로세스가 공유 자원에 동시에 접근하여 결과가 접근 순서에 따라 달라지는 상황",
    "스레드 풀 (Thread Pool)": "미리 생성해 둔 재사용 가능한 스레드들의 집합으로, 스레드 생성 및 종료 비용을 줄이고 자원을 효율적으로 관리하는 기법",
    "비동기 I/O (Asynchronous I/O)": "I/O 작업을 요청한 후 완료를 기다리지 않고 다른 작업을 수행하다가 완료 시 통지를 받는 입출력 방식",
    "논블로킹 I/O (Non-blocking I/O)": "I/O 작업 요청 시 작업 완료 여부와 관계없이 즉시 제어를 반환하는 입출력 방식",
    "이벤트 루프 (Event Loop)": "비동기 프로그래밍에서 이벤트 발생을 지속적으로 감지하고 처리하는 프로그램 구조",
    "메시지 큐 (Message Queue)": "비동기 통신을 위해 메시지를 임시 저장하고 전달하는 컴포넌트로, 시스템 간 결합도를 낮추고 확장성을 높임",
    "pub/sub 패턴 (Publish-Subscribe Pattern)": "메시지의 발행자(Publisher)와 구독자(Subscriber) 사이의 결합도를 낮추는 메시징 패턴",
    "멀티테넌시 (Multitenancy)": "단일 소프트웨어 인스턴스가 여러 고객(테넌트)을 동시에 서비스하는 소프트웨어 아키텍처",
    "샤딩 (Sharding)": "대규모 데이터베이스를 작은 단위(샤드)로 분할하여 여러 서버에 분산 저장하는 기법으로, 성능과 확장성을 향상시킴",
    "클러스터링 (Clustering)": "여러 서버를 하나의 시스템처럼 연결하여 부하 분산, 고가용성, 병렬 처리를 실현하는 기술",
    "로깅 (Logging)": "시스템이나 애플리케이션의 동작 상태, 오류, 경고 등의 정보를 시간 순으로 기록하는 과정",
    "모니터링 (Monitoring)": "시스템의 성능, 가용성, 오류 등을 실시간으로 관찰하고 분석하여 문제를 사전에 감지하고 대응하는 과정",
    "프로파일링 (Profiling)": "프로그램의 실행 시간, 메모리 사용량 등을 측정하여 성능 병목 지점을 식별하고 최적화하는 분석 기법",
    "추상 메서드 (Abstract Method)": "구현부가 없이 선언만 된 메서드로, 상속받는 하위 클래스에서 반드시 구현해야 함",
    "인터페이스 (Interface)": "클래스가 구현해야 할 메서드들을 선언만 해놓은 추상 형태의 명세로, 다중 상속과 느슨한 결합을 가능하게 함",
    "다형성 (Polymorphism)": "같은 인터페이스나 클래스를 여러 객체가 다양한 방식으로 구현할 수 있게 하는 객체지향 프로그래밍의 특성",
    "캡슐화 (Encapsulation)": "객체의 데이터와 해당 데이터를 처리하는 메서드를 하나로 묶고, 객체 내부 상태에 대한 접근을 제한하는 개념",
    "상속 (Inheritance)": "기존 클래스의 특성을 새로운 클래스가 재사용할 수 있게 하는 객체지향 프로그래밍의 메커니즘",
    "오버라이딩 (Overriding)": "상위 클래스에서 정의한 메서드를 하위 클래스에서 같은 이름으로 재정의하여 사용하는 것",
    "오버로딩 (Overloading)": "같은 이름의 메서드를 여러 개 정의하되 매개변수의 타입, 개수, 순서를 다르게 하여 다양한 호출 방식을 제공하는 것",
    "람다식 (Lambda Expression)": "익명 함수를 간결하게 표현할 수 있는 방식으로, 함수형 프로그래밍을 지원하는 프로그래밍 언어의 기능",
    "SOLID 원칙 (SOLID Principles)": "객체지향 설계의 핵심 원칙으로, 단일 책임, 개방-폐쇄, 리스코프 치환, 인터페이스 분리, 의존성 역전의 다섯 가지 원칙을 의미",
    "JDBC (Java Database Connectivity)": "자바 애플리케이션에서 관계형 데이터베이스에 접근하고 조작할 수 있게 하는 표준 API",
    "트랜잭션 (Transaction)": "데이터베이스의 상태를 변화시키는 작업의 단위로, 전체가 성공 또는 실패로 처리되는 일련의 연산",
    "영속성 (Persistence)": "프로그램이 종료되어도 데이터가 사라지지 않고 지속적으로 유지되는 데이터의 특성",
    "JPA (Java Persistence API)": "자바 애플리케이션에서 관계형 데이터베이스를 객체지향적으로 사용할 수 있게 해주는 ORM 표준 기술",
    "어노테이션 (Annotation)": "자바 소스 코드에 추가할 수 있는 메타데이터의 형태로, 컴파일러나 런타임에 특별한 처리를 가능하게 하는 구문",
    "IoC 컨테이너 (IoC Container)": "객체의 생명주기와 의존성을 관리하는 프레임워크의 핵심 컴포넌트로, 제어의 역전 원칙을 구현",
    "REST (Representational State Transfer)": "웹 서비스 간 통신을 위한 아키텍처 스타일로, 자원의 표현에 의한 상태 전달을 강조",
    "MVC 패턴 (MVC Pattern)": "애플리케이션을 모델(데이터), 뷰(사용자 인터페이스), 컨트롤러(로직)로 분리하여 개발하는 소프트웨어 디자인 패턴",
    "DTO (Data Transfer Object)": "계층 간 데이터 전송을 위해 사용되는 객체로, 주로 데이터를 캡슐화하여 전달하는 데 사용",
    "DAO (Data Access Object)": "데이터베이스나 기타 영속성 매커니즘에 접근하는 객체로, 데이터 접근과 조작의 추상화와 캡슐화를 제공",
    "리포지토리 (Repository)": "도메인과 데이터 매핑 계층 사이의 중재자 역할을 하는 객체로, 컬렉션과 유사한 인터페이스를 통해 도메인 객체에 접근 방법을 제공",
    "서비스 레이어 (Service Layer)": "애플리케이션의 비즈니스 로직을 포함하는 계층으로, 여러 하위 계층의 기능을 조합하여 복잡한 작업을 수행",
    "컨트롤러 (Controller)": "MVC 패턴에서 사용자의 입력을 받아 모델을 업데이트하고 뷰를 선택하는 역할을 하는 컴포넌트",
    "미들웨어 (Middleware)": "운영 체제와 응용 프로그램 사이에서 다양한 서비스를 제공하는 소프트웨어 계층",
    "서블릿 (Servlet)": "자바 웹 애플리케이션에서 클라이언트 요청을 동적으로 처리하고 응답을 생성하는 서버 측 프로그램",
    "JSP (JavaServer Pages)": "HTML 내에 자바 코드를 삽입하여 동적 웹 페이지를 생성할 수 있게 해주는 자바 기반의 서버 사이드 스크립트 기술",
    "템플릿 엔진 (Template Engine)": "정적 템플릿에 데이터를 결합하여 동적으로 콘텐츠를 생성하는 소프트웨어 컴포넌트",
    "OOP (Object-Oriented Programming)": "데이터와 그 데이터를 조작하는 메소드를 객체라는 단위로 묶어 프로그램을 구조화하는 프로그래밍 패러다임",
    "함수형 프로그래밍 (Functional Programming)": "수학적 함수의 개념을 바탕으로 상태 변경과 가변 데이터를 피하고 순수 함수를 조합하여 소프트웨어를 만드는 프로그래밍 패러다임",
    "반응형 프로그래밍 (Reactive Programming)": "데이터 스트림과 변화의 전파에 중점을 둔 프로그래밍 패러다임으로, 비동기 데이터 흐름을 쉽게 표현하고 관리할 수 있게 함",
    "마이크로서비스 (Microservices)": "하나의 큰 애플리케이션을 여러 개의 독립적으로 배포 가능한 작은 서비스로 분할하여 개발하는 소프트웨어 아키텍처 접근 방식",
    "API 게이트웨이 (API Gateway)": "클라이언트와 백엔드 서비스 사이에서 요청과 응답을 중개하고, 인증, 로깅, 요청 라우팅 등을 처리하는 서버",
    "로드밸런싱 (Load Balancing)": "여러 서버에 네트워크 트래픽을 균등하게 분산시켜 시스템의 전체적인 성능과 가용성을 향상시키는 기술",
    "RESTful": "HTTP 프로토콜을 기반으로 자원을 정의하고 자원에 대한 주소를 지정하여 웹 서비스를 설계하는 아키텍처 스타일",
    "HTTP 프로토콜 (HTTP Protocol)": "웹 상에서 클라이언트와 서버 간에 데이터를 주고받기 위한 애플리케이션 계층 프로토콜",
    "Docker": "애플리케이션을 컨테이너라는 표준화된 유닛으로 패키징하여 쉽게 배포하고 실행할 수 있게 해주는 오픈소스 플랫폼",
    "클라우드 네이티브 (Cloud Native)": "클라우드 컴퓨팅 모델의 이점을 최대한 활용하여 확장 가능하고 유연한 애플리케이션을 구축하고 실행하는 접근 방식",
    "서버리스 (Serverless)": "개발자가 서버 인프라를 관리하지 않고 코드 실행에만 집중할 수 있는 클라우드 컴퓨팅 실행 모델",
    "테스트 자동화 (Test Automation)": "사전에 정의된 테스트 케이스를 자동으로 실행하고 결과를 확인하는 소프트웨어 테스팅 방법",
    "정규화 (Normalization)": "관계형 데이터베이스 설계에서 데이터의 중복을 최소화하고, 데이터 무결성을 보장하기 위해 데이터를 구조화하는 과정",
    "SQL (Structured Query Language)": "관계형 데이터베이스 관리 시스템(RDBMS)에서 데이터를 관리하고 쿼리하는 데 사용되는 표준화된 프로그래밍 언어",
    "NoSQL": "관계형 데이터베이스의 한계를 극복하기 위해 설계된 비관계형 데이터베이스 시스템으로, 대량의 분산된 데이터를 저장하고 처리하는 데 적합",
    "XSS (Cross-Site Scripting)": "웹 애플리케이션의 취약점을 이용하여 사용자의 브라우저에 악성 스크립트를 주입하는 보안 공격 기법",
    "CSRF (Cross-Site Request Forgery)": "공격자가 사용자의 의도와 무관하게 특정 웹사이트에 요청을 보내도록 유도하는 웹 보안 공격 기법",
    "SQL 인젝션 (SQL Injection)": "사용자 입력을 통해 악의적인 SQL 문을 주입하여 데이터베이스를 비정상적으로 조작하는 공격 기법",
    "보안 취약점 (Security Vulnerability)": "시스템, 네트워크, 애플리케이션에서 공격자가 악용할 수 있는 보안상의 결함이나 약점",
    "확장성 (Scalability)": "시스템이 증가하는 작업량이나 사용자 수에 대응하여 성능을 유지하거나 향상시킬 수 있는 능력",
    "고가용성 (High Availability)": "시스템이 장애 상황에서도 중단 없이 지속적으로 서비스를 제공할 수 있는 능력",
    "분산 시스템 (Distributed System)": "네트워크로 연결된 여러 독립적인 컴퓨터가 하나의 시스템처럼 협력하여 작업을 수행하는 컴퓨팅 환경",
    "기술 부채 (Technical Debt)": "빠른 개발이나 단기적 이익을 위해 최적화되지 않은 기술적 선택으로 인해 발생하는 추가 작업이나 리팩토링 비용",
    "레거시 코드 (Legacy Code)": "오래되고 유지보수가 어려운 코드로, 현재 기술 표준이나 최신 시스템과의 호환성 문제가 있을 수 있는 코드",
    "성능 최적화 (Performance Optimization)": "시스템의 속도, 응답성, 처리량 등을 개선하기 위해 코드, 알고리즘, 리소스 사용을 개선하는 과정",
    "서비스 디스커버리 (Service Discovery)": "마이크로서비스 아키텍처에서 서비스의 위치와 가용성을 동적으로 파악하고 관리하는 메커니즘",
    "분산 트랜잭션 (Distributed Transaction)": "여러 분산된 시스템이나 데이터베이스에 걸쳐 일관성과 원자성을 보장하며 수행되는 트랜잭션",
    "데이터 파이프라인 (Data Pipeline)": "데이터의 수집, 변환, 이동, 저장을 자동화하는 일련의 데이터 처리 과정",
    "빅데이터 (Big Data)": "기존의 데이터 처리 애플리케이션으로는 처리가 어려운 대량의 정형 및 비정형 데이터 집합",
    "머신러닝 (Machine Learning)": "명시적인 프로그래밍 없이 데이터와 경험을 통해 학습하고 성능을 개선하는 인공지능의 한 분야",
    "인덱스 (Index)": "데이터베이스 테이블의 검색 속도를 향상시키기 위해 특정 열의 값과 해당 레코드의 위치 정보를 저장하는 자료 구조",
    "파티셔닝 (Partitioning)": "대용량 테이블이나 인덱스를 관리하기 쉬운 작은 단위로 물리적으로 분할하여 성능과 가용성을 향상시키는 기법",
    "RAID (Redundant Array of Independent Disks)": "여러 개의 디스크를 하나의 논리적 단위로 결합하여 데이터 중복성과 성능을 개선하는 저장 기술",
    "뷰 (View)": "하나 이상의 테이블에서 유도된 가상의 테이블로, 복잡한 쿼리를 단순화하고 데이터 보안을 강화하는 데 사용",
    "프로시저 (Procedure)": "데이터베이스에서 특정 작업을 수행하기 위해 미리 컴파일하여 저장해 둔 SQL문의 집합",
    "트리거 (Trigger)": "데이터베이스에서 특정 이벤트(삽입, 수정, 삭제 등)가 발생할 때 자동으로 실행되는 저장 프로시저",
    "B-트리 (B-Tree)": "다수의 키와 자식을 가질 수 있는 균형 잡힌 트리 구조로, 대용량 데이터의 효율적인 검색과 삽입, 삭제를 지원하는 자료구조",
    "TCP/IP": "인터넷과 대부분의 상업용 네트워크에서 사용되는 기본 통신 언어 또는 프로토콜의 집합",
    "UDP (User Datagram Protocol)": "신뢰성 없는 데이터그램 방식의 통신 프로토콜로, 빠른 전송이 필요한 경우에 사용",
    "HTTPS (Hypertext Transfer Protocol Secure)": "웹 통신 프로토콜인 HTTP에 데이터 암호화를 위한 SSL/TLS를 적용한 보안 강화 버전",
    "DNS (Domain Name System)": "사람이 읽을 수 있는 도메인 이름을 기계가 읽을 수 있는 IP 주소로 변환하는 분산형 이름 확인 시스템",
    "DHCP (Dynamic Host Configuration Protocol)": "네트워크 장치에 IP 주소, 서브넷 마스크, 기본 게이트웨이 등의 네트워크 구성 정보를 자동으로 할당하는 프로토콜",
    "NAT (Network Address Translation)": "사설 IP 주소를 공인 IP 주소로 변환하여 내부 네트워크를 외부와 연결하는 기술",
    "라우팅 (Routing)": "네트워크에서 데이터 패킷이 출발지에서 목적지까지 최적의 경로로 전송되도록 경로를 선택하고 안내하는 과정",
    "서브넷 (Subnet)": "대규모 네트워크를 관리하기 쉬운 더 작은 네트워크로 분할한 것으로, IP 주소의 효율적 사용과 네트워크 성능 향상을 위해 사용",
    "방화벽 (Firewall)": "미리 정의된 보안 규칙에 기반하여 들어오고 나가는 네트워크 트래픽을 모니터링하고 제어하는 네트워크 보안 시스템",
    "VPN (Virtual Private Network)": "공용 인터넷과 같은 공개 네트워크를 통해 암호화된 연결을 생성하여 안전한 사설 네트워크 통신을 가능하게 하는 기술",
    "SSL/TLS (Secure Sockets Layer/Transport Layer Security)": "인터넷 상의 데이터 전송을 암호화하여 보안을 제공하는 암호화 프로토콜",
    "로드밸런서 (Load Balancer)": "다수의 서버에 네트워크 트래픽을 분산시켜 서버의 과부하를 방지하고 전체 시스템의 가용성과 응답성을 향상시키는 장치 또는 소프트웨어",
    "프록시 서버 (Proxy Server)": "클라이언트와 목적지 서버 사이에서 중계 역할을 하며, 캐싱, 보안, 접근 제어 등의 기능을 제공하는 서버",
    "OSI 모델 (OSI Model)": "네트워크 프로토콜을 7개의 추상화 계층으로 표준화한 개념적 모델",
    "MAC 주소 (MAC Address)": "네트워크 장비의 물리적 주소로, 이더넷 통신에서 장치를 식별하는 고유 번호",
    "IP 주소 (IP Address)": "인터넷 프로토콜 네트워크에서 장치를 식별하는 숫자 주소",
    "포트 (Port)": "네트워크 통신에서 특정 프로세스나 서비스를 식별하는 16비트 숫자",
    "소켓 (Socket)": "IP 주소와 포트 번호의 조합으로, 네트워크 통신의 종단점을 나타내는 소프트웨어 인터페이스",
    "해시 함수 (Hash Function)": "임의의 크기 데이터를 고정 크기의 값으로 매핑하는 함수",
    "PKI (Public Key Infrastructure)": "디지털 인증서를 생성, 관리, 배포, 사용, 저장 및 파기하는 정책과 절차의 집합",
    "대칭키 (Symmetric Key)": "암호화와 복호화에 동일한 키를 사용하는 암호화 방식",
    "비대칭키 (Asymmetric Key)": "공개 키와 개인 키 쌍을 사용하여 암호화와 복호화를 수행하는 암호화 방식",
    "디지털 서명 (Digital Signature)": "전자 문서의 진본성과 무결성을 보증하는 전자적 서명 기술",
    "접근 제어 (Access Control)": "사용자나 프로세스의 시스템 자원 접근을 제한하고 관리하는 보안 기술",
    "권한 관리 (Permission Management)": "사용자나 그룹에 특정 시스템 자원이나 기능에 대한 접근 권한을 할당하고 관리하는 프로세스",
    "취약점 스캐닝 (Vulnerability Scanning)": "시스템이나 네트워크의 보안 취약점을 자동으로 검사하고 식별하는 프로세스",
    "침입탐지 시스템 (Intrusion Detection System)": "네트워크나 시스템에 대한 무단 접근이나 악의적인 활동을 실시간으로 감지하고 알리는 보안 시스템",
    "스케줄링 (Scheduling)": "여러 프로세스에 CPU 시간을 할당하여 시스템 자원을 효율적으로 사용하고 성능을 최적화하는 기법",
    "페이징 (Paging)": "물리 메모리와 가상 메모리를 동일한 크기의 블록으로 나누어 관리하는 메모리 관리 기법",
    "세그멘테이션 (Segmentation)": "프로그램의 논리적 단위에 따라 가상 메모리를 다양한 크기의 세그먼트로 나누어 관리하는 메모리 기법",
    "가상 메모리 (Virtual Memory)": "물리적 메모리 크기의 한계를 극복하기 위해 디스크를 메모리의 연장으로 사용하는 메모리 관리 기술",
    "인터럽트 (Interrupt)": "CPU의 정상적인 실행 흐름을 일시 중단하고 다른 작업을 처리하도록 하는 하드웨어 또는 소프트웨어 신호",
    "시스템 콜 (System Call)": "사용자 프로그램이 운영체제의 서비스를 요청하기 위해 사용하는 인터페이스",
    "데이터베이스 튜닝 (Database Tuning)": "쿼리 최적화, 인덱스 조정, 구조 변경 등을 통해 데이터베이스의 응답 시간과 처리량을 개선하는 과정",
    "Redis": "고성능 키-값 저장소로 사용되는 인메모리 데이터 구조 저장소",
    "Memcached": "분산 메모리 캐싱 시스템으로, 데이터베이스 부하를 줄이고 웹 애플리케이션 성능을 향상시키는 데 사용",
    "CDN (Content Delivery Network)": "지리적으로 분산된 서버 네트워크를 통해 사용자에게 가까운 위치에서 콘텐츠를 빠르게 전송하는 시스템",
    "네트워크 토폴로지 (Network Topology)": "컴퓨터 네트워크의 요소들(링크, 노드 등)을 물리적으로 연결해 놓은 방식이나 연결 형태",
    "패킷 스니핑 (Packet Sniffing)": "네트워크 상에서 송수신되는 데이터 패킷을 실시간으로 감시하고 분석하는 기술",
    "포트 스캐닝 (Port Scanning)": "특정 IP 주소의 열린 포트를 찾아내어 서비스 종류와 취약점을 파악하는 네트워크 보안 기술",
    "인증서 (Certificate)": "디지털 서명을 통해 공개 키의 소유권을 증명하고 신원을 보증하는 전자 문서",
    "프로세스 (Process)": "실행 중인 프로그램의 인스턴스로, 독립된 메모리 공간과 시스템 자원을 할당받는 작업 단위",
    "커널 (Kernel)": "운영체제의 핵심 부분으로 하드웨어와 소프트웨어 간 인터페이스 역할을 하며 자원을 관리하는 요소",
    "사용자 모드 (User Mode)": "제한된 권한으로 애플리케이션이 실행되는 모드로, 시스템 보호를 위해 직접적인 하드웨어 접근이 제한됨",
    "커널 모드 (Kernel Mode)": "모든 시스템 자원에 접근 가능한 운영체제의 특권 실행 모드",
    "시그널 (Signal)": "프로세스 간 비동기 통신 방법으로, 특정 이벤트 발생을 알리거나 프로세스 동작을 제어하는 데 사용",
    "컨테이너화 (Containerization)": "애플리케이션과 그 실행 환경을 격리하여 패키징하는 기술로, 일관된 배포와 실행을 가능하게 함",
    "오케스트레이션 (Orchestration)": "여러 컨테이너의 배포, 네트워킹, 확장, 가용성을 자동으로 관리하고 조정하는 기술",
    "Kubernetes": "컨테이너화된 애플리케이션의 자동 배포, 스케일링, 로드 밸런싱, 장애 복구 등을 지원하는 오픈소스 플랫폼",
    "애자일 (Agile)": "반복적인 개발과 빠른 피드백을 통해 변화에 유연하게 대응하는 소프트웨어 개발 방법론",
    "스크럼 (Scrum)": "애자일 방법론의 일종으로, 작은 팀 단위로 짧은 개발 주기(스프린트)를 반복하여 프로젝트를 진행하는 프레임워크",
    "캔반 (Kanban)": "작업의 시각화와 작업 진행 중인 항목 수 제한을 통해 효율성을 높이는 린(Lean) 기반의 작업 관리 방법론",
    "코드 리뷰 (Code Review)": "동료 개발자가 작성한 코드를 검토하여 품질을 향상시키고 지식을 공유하는 협업 과정",
    "버전 관리 (Version Control)": "소스 코드의 변경 이력을 추적하고 여러 개발자의 협업을 지원하는 시스템",
    "스프링 시큐리티 (Spring Security)": "인증, 권한 부여, 암호화 등 다양한 보안 기능을 제공하는 스프링 기반 보안 프레임워크",
    "Querydsl": "타입 안전성을 보장하며 SQL과 유사한 쿼리를 자바 코드로 작성할 수 있게 해주는 프레임워크",
    "스프링 리액티브 (Spring Reactive)": "비동기, 논블로킹 방식의 애플리케이션 개발을 지원하는 스프링 프레임워크의 모듈",
    "스프링 클라우드 (Spring Cloud)": "분산 시스템과 마이크로서비스 아키텍처 구현을 위한 스프링 기반의 도구 모음",
    "스프링 배치 (Spring Batch)": "대용량 배치 처리를 위한 스프링 기반 프레임워크로, 작업의 재시작, 재시도, 건너뛰기 등을 지원",
    "스프링 인티그레이션 (Spring Integration)": "엔터프라이즈 통합 패턴을 구현한 스프링 기반의 메시징 및 통합 프레임워크",
    "AOP (Aspect-Oriented Programming)": "횡단 관심사를 분리하여 모듈화하는 프로그래밍 패러다임",
    "트랜잭션 관리 (Transaction Management)": "데이터베이스 작업의 원자성, 일관성, 격리성, 지속성을 보장하기 위한 관리 기법",
    "익셉션 핸들링 (Exception Handling)": "프로그램 실행 중 발생하는 예외 상황을 감지하고 적절히 처리하는 메커니즘",
    "스프링 MVC (Spring MVC)": "웹 애플리케이션 개발을 위한 스프링의 MVC(Model-View-Controller) 구현 모듈",
    "뷰 리졸버 (View Resolver)": "컨트롤러가 반환한 논리적 뷰 이름을 실제 뷰 리소스로 매핑하는 스프링 MVC 컴포넌트",
    "메시지 소스 (Message Source)": "다국어 지원을 위해 애플리케이션의 텍스트 메시지를 외부화하고 관리하는 스프링 인터페이스",
    "폼 검증 (Form Validation)": "사용자가 입력한 데이터의 유효성과 정확성을 검사하는 과정",
    "동시성 제어 (Concurrency Control)": "여러 스레드나 프로세스가 동시에 데이터에 접근할 때 일관성을 유지하기 위한 기술",
    "블로킹 큐 (Blocking Queue)": "큐가 비어있거나 가득 찼을 때 스레드를 대기시키는 스레드 안전한 큐 구조",
    "비블로킹 큐 (Non-blocking Queue)": "큐의 상태와 관계없이 항상 즉시 반환하는 스레드 안전한 큐 구조",
    "미래 객체 (Future Object)": "비동기 연산의 결과를 표현하고 접근할 수 있게 해주는 객체",
    "콜러블 (Callable)": "자바의 동시성 API에서 제공하는 인터페이스로, 값을 반환하고 예외를 던질 수 있는 비동기 작업을 정의",
    "러너블 (Runnable)": "자바에서 스레드로 실행할 수 있는 작업을 정의하는 인터페이스로, 반환값이 없는 비동기 작업을 나타냄",
    "Fork/Join 프레임워크 (Fork/Join Framework)": "재귀적으로 작업을 작은 단위로 분할(fork)하고 결과를 합치는(join) 방식으로 병렬 처리를 지원하는 자바의 프레임워크",
    "2PC (Two-Phase Commit)": "분산 시스템에서 모든 참여자가 트랜잭션을 수행할 수 있는지 확인(준비 단계)한 후, 모두 가능할 때만 실제로 커밋(커밋 단계)하는 프로토콜",
    "XA 트랜잭션 (XA Transaction)": "여러 데이터베이스나 메시지 큐와 같은 다양한 리소스에 걸친 분산 트랜잭션을 관리하기 위한 산업 표준",
    "Hibernate": "자바 애플리케이션과 관계형 데이터베이스 사이의 객체-관계 매핑(ORM)을 자동화하는 프레임워크",
    "JPQL (Java Persistence Query Language)": "JPA 표준의 일부로, 객체 지향적인 방식으로 데이터베이스 쿼리를 작성할 수 있게 해주는 쿼리 언어",
    "JVM (Java Virtual Machine)": "자바 프로그램을 실행하기 위한 가상 머신으로, 자바 바이트코드를 해석하고 실행하는 역할을 수행",
    "JRE (Java Runtime Environment)": "자바 애플리케이션을 실행하기 위한 환경으로, JVM과 자바 클래스 라이브러리를 포함",
    "JDK (Java Development Kit)": "자바 애플리케이션 개발에 필요한 도구와 JRE를 포함하는 소프트웨어 패키지",
    "디자인 시스템 (Design System)": "일관된 사용자 경험을 제공하기 위한 재사용 가능한 UI 컴포넌트, 가이드라인, 패턴의 집합",
    "마이크로프론트엔드 (Micro Frontend)": "마이크로서비스 개념을 프론트엔드에 적용한 아키텍처로, 대규모 웹 애플리케이션을 독립적으로 개발 및 배포 가능한 작은 단위로 분할",
    "서버리스 컴퓨팅 (Serverless Computing)": "개발자가 서버 인프라를 관리하지 않고도 애플리케이션을 구축하고 실행할 수 있게 해주는 클라우드 컴퓨팅 실행 모델",
    "엣지 컴퓨팅 (Edge Computing)": "중앙화된 데이터 센터 대신 데이터 소스와 가까운 네트워크 '엣지'에서 컴퓨팅을 수행하여 지연 시간을 줄이고 대역폭 사용을 최적화하는 분산 컴퓨팅 패러다임",
    "@SpringBootApplication": "스프링 부트 애플리케이션의 주 설정 클래스를 지정하는 어노테이션으로, @Configuration, @EnableAutoConfiguration, @ComponentScan을 포함",
    "@Autowired": "의존성 주입을 위해 사용되는 어노테이션으로, 스프링이 해당 타입의 빈을 찾아 자동으로 주입",
    "@Component": "스프링 컨테이너가 관리할 일반적인 컴포넌트를 나타내는 어노테이션",
    "@Service": "비즈니스 로직을 처리하는 서비스 계층의 컴포넌트를 나타내는 어노테이션",
    "@Repository": "데이터 접근 계층의 DAO나 리포지토리 컴포넌트를 나타내는 어노테이션",
    "@Controller": "스프링 MVC의 컨트롤러를 나타내는 어노테이션",
    "@RestController": "@Controller와 @ResponseBody를 합친 어노테이션으로, REST API를 위한 컨트롤러를 생성",
    "@RequestMapping": "HTTP 요청을 특정 핸들러 메소드에 매핑하는 어노테이션",
    "@GetMapping": "HTTP GET 요청을 특정 핸들러 메소드에 매핑하는 @RequestMapping의 축약형",
    "@PostMapping": "HTTP POST 요청을 특정 핸들러 메소드에 매핑하는 @RequestMapping의 축약형",
    "@RequestBody": "HTTP 요청 본문을 자바 객체로 변환하는 어노테이션",
    "@ResponseBody": "핸들러 메소드의 반환값을 HTTP 응답 본문으로 변환하는 어노테이션",
    "@PathVariable": "URL 경로의 일부를 메소드의 매개변수로 바인딩하는 어노테이션",
    "@RequestParam": "HTTP 요청 파라미터를 메소드의 매개변수로 바인딩하는 어노테이션",
    "@Configuration": "스프링의 설정 클래스를 나타내는 어노테이션",
    "@Bean": "개발자가 직접 제어할 수 없는 외부 라이브러리 등을 빈으로 만들어 등록할 때 사용하는 어노테이션",
    "@Value": "프로퍼티 파일의 값을 빈의 필드에 동적으로 주입하는 메커니즘",
    "@ConfigurationProperties": "다수의 프로퍼티를 階구조적으로 바인딩하여 타입 안전한 설정 관리 방식",
    "@Transactional": "선언적 방식의 트랜잭션 관리를 통한 데이터 일관성 보장 기법",
    "@Scheduled": "메소드의 주기적 실행을 다양한 옵션으로 제어하는 스케줄링 기능",
    "@Async": "메소드를 별도의 스레드에서 비동기적으로 실행하여 성능을 향상시키는 방법",
    "@CrossOrigin": "다른 도메인에서의 리소스 요청을 허용하는 보안 설정 방식",
    "@ExceptionHandler": "특정 예외 발생 시 처리 로직을 중앙화하여 일관성 있는 예외 처리 구현 방법",
    "@ControllerAdvice": "전역적 예외 처리와 모델 속성 추가를 위한 특별한 컨트롤러 역할",
    "@Valid": "객체의 필드에 대한 유효성 검사를 자동화하는 검증 프로세스",
    "@Profile": "환경에 따라 선택적으로 빈을 등록하고 관리하는 설정 방식",
    "@Lazy": "필요한 시점까지 빈의 초기화를 지연시켜 리소스를 절약하는 최적화 기법",
    "@Scope": "빈의 생성, 소멸, 공유 범위를 세밀하게 제어하는 관리 전략",
    "@Qualifier": "동일 타입의 여러 빈 중 특정 빈을 명시적으로 선택하는 의존성 주입 제어 방식",
    "@Primary": "동일 타입의 여러 빈 중 기본으로 사용될 우선 순위가 높은 빈 지정 방식",
    "@EnableCaching": "애플리케이션의 캐싱 인프라를 설정하고 활성화하는 선언",
    "@Cacheable": "메소드 실행 결과를 캐시에 저장하고 재사용하는 성능 최적화 기법"
}